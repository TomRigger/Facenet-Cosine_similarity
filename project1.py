# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q_Gjg-UpYWMCdYqPyx09MexoVZwPUbDQ
"""

pip install arcface

import os
import numpy as np
from facenet_pytorch import MTCNN, InceptionResnetV1
from PIL import Image
from torchvision import transforms
from sklearn.metrics.pairwise import cosine_similarity, cosine_distances
dataset_path='/content/drive/MyDrive/Dataset2'
mtcnn=MTCNN(image_size=160, margin=0)
resnet=InceptionResnetV1(pretrained='vggface2').eval()

def process_image(image_path):
  image=Image.open(image_path).convert('RGB')
  boxes, _=mtcnn.detect(image)
  if not isinstance(boxes, np.ndarray):
    return None

  box=boxes[0]
  face=image.crop(box)
  face = transforms.Resize((160, 160))(face)
  face = transforms.ToTensor()(face)
  face = face.unsqueeze(0)

  return face

def get_embedding(face):
  embedding=resnet(face)
  return embedding.detach().numpy()

person_folders=os.listdir(dataset_path)
all_embeddings = []
all_names=[]
for person in person_folders:
        person_path = os.path.join(dataset_path, person)
        image_files = os.listdir(person_path)
        embeddings = []
        for image_file in image_files:
            image_path = os.path.join(person_path, image_file)
            face = process_image(image_path)
            if face is not None:
                embedding = get_embedding(face)
                embeddings.append(embedding)

                face_pil=transforms.ToPILImage()(face.squeeze(0))
                face_pil.show()

        if len(embeddings) > 0:
            embeddings = np.concatenate(embeddings, axis=0)
            all_embeddings.append(embeddings)
            all_names.append(person)

all_embeddings = np.concatenate(all_embeddings, axis=0)
cosine_matrix = cosine_similarity(all_embeddings)

print("Cosine similarity Matrix:")
print(cosine_matrix)

for i in range(len(all_names)):
        for j in range(i + 1, len(all_names)):
            person1_name = all_names[i]
            person2_name = all_names[j]
            person1_idx = np.arange(i * 4, i * 4 + 4)
            person2_idx = np.arange(j * 4, j * 4 + 4)
            pairwise_similarity_matrix = cosine_matrix[person1_idx][:, person2_idx]
            print(f"{person1_name} and {person2_name}:")
            print(pairwise_similarity_matrix)

for i in range(len(all_names)):
            person1_name = all_names[i]
            person2_name = all_names[i]
            person1_idx = np.arange(i * 4, i * 4 + 4)
            person2_idx = np.arange(i * 4, i * 4 + 4)
            pairwise_similarity_matrix = cosine_matrix[person1_idx][:, person2_idx]
            print(f"{person1_name} and {person2_name}:")
            print(pairwise_similarity_matrix)